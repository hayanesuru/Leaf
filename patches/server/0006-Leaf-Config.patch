From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dreeam <61569423+Dreeam-qwq@users.noreply.github.com>
Date: Wed, 12 Oct 2022 10:42:15 -0400
Subject: [PATCH] Leaf Config

Leaf Config v3
including load config, backup old or outdated config, and add config to spark profiler automatically.

TODO - Dreeam:
Add per world config
Add config reload

diff --git a/build.gradle.kts b/build.gradle.kts
index 0a31324417d630d9c6917c08ecebb39592355fbb..e4362a8c87686cc6053080634c252f50e1f66739 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -27,6 +27,13 @@ abstract class MockitoAgentProvider : CommandLineArgumentProvider {
 dependencies {
     implementation(project(":leaf-api")) // Gale start - project setup - Depend on own API // Leaf
     implementation("ca.spottedleaf:concurrentutil:0.0.2") // Paper - Add ConcurrentUtil dependency
+
+    // Leaf start - Leaf Config
+    implementation("com.github.thatsmusic99:ConfigurationMaster-API:v2.0.0-rc.2") {
+        exclude(group = "org.yaml", module = "snakeyaml")
+    }
+    // Leaf end - Leaf Config
+
     // Paper start
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a880f4e5cf712654649ad043e58e073e9a87c0fe..ddf026889cdb816caea60c3da156fa38b078b58a 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -132,6 +132,7 @@ public class Main {
             Bootstrap.bootStrap();
             Bootstrap.validate();
             Util.startTimerHackThread();
+            org.dreeam.leaf.config.LeafConfig.loadConfig(); // Leaf
             Path path1 = Paths.get("server.properties");
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
 
diff --git a/src/main/java/org/dreeam/leaf/config/ConfigModules.java b/src/main/java/org/dreeam/leaf/config/ConfigModules.java
new file mode 100644
index 0000000000000000000000000000000000000000..475da1247655dd07ab59273ab5794b04b20e05ed
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/ConfigModules.java
@@ -0,0 +1,57 @@
+package org.dreeam.leaf.config;
+
+import org.dreeam.leaf.config.annotations.Experimental;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+public abstract class ConfigModules extends LeafConfig {
+
+    private static final Set<ConfigModules> modules = new HashSet<>();
+    public LeafGlobalConfig config;
+
+    public ConfigModules() {
+        this.config = LeafConfig.config();
+    }
+
+    public static void initModules() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
+        List<Class<?>> enabledExperimentalModules = new ArrayList<>();
+        for (Class<?> clazz : LeafConfig.getClasses(LeafConfig.I_CONFIG_PKG)) {
+            ConfigModules module = (ConfigModules) clazz.getConstructor().newInstance();
+            module.onLoaded();
+
+            modules.add(module);
+            for (Field field : getAnnotatedStaticFields(clazz, Experimental.class)) {
+                Object obj = field.get(null);
+                if (!(obj instanceof Boolean)) continue;
+                boolean enabled = (Boolean) obj;
+                if (enabled) {
+                    enabledExperimentalModules.add(clazz);
+                    break;
+                }
+            }
+        }
+        if (!enabledExperimentalModules.isEmpty()) {
+            LeafConfig.LOGGER.warn("You have following experimental module(s) enabled: {}, please report any bugs you found!", enabledExperimentalModules.stream().map(Class::getSimpleName).toList());
+        }
+    }
+
+    private static List<Field> getAnnotatedStaticFields(Class<?> clazz, Class<? extends Annotation> annotation) {
+        List<Field> fields = new ArrayList<>();
+        for (Field field : clazz.getDeclaredFields()) {
+            if (field.isAnnotationPresent(annotation) && Modifier.isStatic(field.getModifiers())) {
+                field.setAccessible(true);
+                fields.add(field);
+            }
+        }
+        return fields;
+    }
+
+    public abstract void onLoaded();
+}
diff --git a/src/main/java/org/dreeam/leaf/config/EnumConfigCategory.java b/src/main/java/org/dreeam/leaf/config/EnumConfigCategory.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d99f0711c6b4f298dd296c26c11dd9d4b633264
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/EnumConfigCategory.java
@@ -0,0 +1,26 @@
+package org.dreeam.leaf.config;
+
+public enum EnumConfigCategory {
+
+    ASYNC("async"),
+    PERF("performance"),
+    FIXES("fixes"),
+    GAMEPLAY("gameplay-mechanisms"),
+    NETWORK("network"),
+    MISC("misc");
+
+    private final String baseKeyName;
+    private static final EnumConfigCategory[] VALUES = EnumConfigCategory.values();
+
+    EnumConfigCategory(String baseKeyName) {
+        this.baseKeyName = baseKeyName;
+    }
+
+    public String getBaseKeyName() {
+        return this.baseKeyName;
+    }
+
+    public static EnumConfigCategory[] getCategoryValues() {
+        return VALUES;
+    }
+}
diff --git a/src/main/java/org/dreeam/leaf/config/LeafConfig.java b/src/main/java/org/dreeam/leaf/config/LeafConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..fdbdf3f6a5071ce629d2881e861075dbeef11b42
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/LeafConfig.java
@@ -0,0 +1,269 @@
+package org.dreeam.leaf.config;
+
+import io.papermc.paper.configuration.GlobalConfiguration;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.JarURLConnection;
+import java.net.URL;
+import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.FileAlreadyExistsException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.Enumeration;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+
+/*
+ *  Yoinked from: https://github.com/xGinko/AnarchyExploitFixes/ & https://github.com/LuminolMC/Luminol
+ *  @author: @xGinko & @MrHua269
+ */
+public class LeafConfig {
+
+    public static final Logger LOGGER = LogManager.getLogger(LeafConfig.class.getSimpleName());
+    protected static final File I_CONFIG_FOLDER = new File("config");
+    protected static final String I_CONFIG_PKG = "org.dreeam.leaf.config.modules";
+    protected static final String I_GLOBAL_CONFIG_FILE = "leaf-global.yml";
+    protected static final String I_LEVEL_CONFIG_FILE = "leaf-world-defaults.yml"; // Leaf TODO - Per level config
+
+    private static LeafGlobalConfig leafGlobalConfig;
+
+    /* Load & Reload */
+
+    public static void reload() {
+        try {
+            long begin = System.nanoTime();
+            LOGGER.info("Reloading config...");
+
+            loadConfig(false);
+
+            LOGGER.info("Successfully reloaded config in {}ms.", (System.nanoTime() - begin) / 1_000_000);
+        } catch (Exception e) {
+            LOGGER.error("Failed to reload config.", e);
+        }
+    }
+
+    @Contract(" -> new")
+    public static @NotNull CompletableFuture<Void> reloadAsync() {
+        return new CompletableFuture<>();
+    }
+
+    public static void loadConfig() {
+        try {
+            long begin = System.nanoTime();
+            LOGGER.info("Loading config...");
+
+            purgeOutdated();
+            loadConfig(true);
+
+            LOGGER.info("Successfully loaded config in {}ms.", (System.nanoTime() - begin) / 1_000_000);
+        } catch (Exception e) {
+            LeafConfig.LOGGER.error("Failed to load config modules!", e);
+        }
+    }
+
+    /* Load Global Config */
+
+    private static void loadConfig(boolean init) throws Exception {
+        // Create config folder
+        createDirectory(LeafConfig.I_CONFIG_FOLDER);
+
+        leafGlobalConfig = new LeafGlobalConfig(init);
+
+        // Load config modules
+        ConfigModules.initModules();
+
+        // Save config to disk
+        leafGlobalConfig.saveConfig();
+    }
+
+    public static LeafGlobalConfig config() {
+        return leafGlobalConfig;
+    }
+
+    /* Create config folder */
+
+    protected static void createDirectory(File dir) throws IOException {
+        try {
+            Files.createDirectories(dir.toPath());
+        } catch (FileAlreadyExistsException e) { // Thrown if dir exists but is not a directory
+            if (dir.delete()) createDirectory(dir);
+        }
+    }
+
+    /* Scan classes under package */
+
+    public static @NotNull Set<Class<?>> getClasses(String pack) {
+        Set<Class<?>> classes = new LinkedHashSet<>();
+        String packageDirName = pack.replace('.', '/');
+        Enumeration<URL> dirs;
+
+        try {
+            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);
+            while (dirs.hasMoreElements()) {
+                URL url = dirs.nextElement();
+                String protocol = url.getProtocol();
+                if ("file".equals(protocol)) {
+                    String filePath = URLDecoder.decode(url.getFile(), StandardCharsets.UTF_8);
+                    findClassesInPackageByFile(pack, filePath, classes);
+                } else if ("jar".equals(protocol)) {
+                    JarFile jar;
+                    try {
+                        jar = ((JarURLConnection) url.openConnection()).getJarFile();
+                        Enumeration<JarEntry> entries = jar.entries();
+                        findClassesInPackageByJar(pack, entries, packageDirName, classes);
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+            }
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+
+        return classes;
+    }
+
+    private static void findClassesInPackageByFile(String packageName, String packagePath, Set<Class<?>> classes) {
+        File dir = new File(packagePath);
+
+        if (!dir.exists() || !dir.isDirectory()) {
+            return;
+        }
+
+        File[] dirfiles = dir.listFiles((file) -> file.isDirectory() || file.getName().endsWith(".class"));
+        if (dirfiles != null) {
+            for (File file : dirfiles) {
+                if (file.isDirectory()) {
+                    findClassesInPackageByFile(packageName + "." + file.getName(), file.getAbsolutePath(), classes);
+                } else {
+                    String className = file.getName().substring(0, file.getName().length() - 6);
+                    try {
+                        classes.add(Class.forName(packageName + '.' + className));
+                    } catch (ClassNotFoundException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+            }
+        }
+    }
+
+    private static void findClassesInPackageByJar(String packageName, Enumeration<JarEntry> entries, String packageDirName, Set<Class<?>> classes) {
+        while (entries.hasMoreElements()) {
+            JarEntry entry = entries.nextElement();
+            String name = entry.getName();
+
+            if (name.charAt(0) == '/') {
+                name = name.substring(1);
+            }
+
+            if (name.startsWith(packageDirName)) {
+                int idx = name.lastIndexOf('/');
+
+                if (idx != -1) {
+                    packageName = name.substring(0, idx).replace('/', '.');
+                }
+
+                if (name.endsWith(".class") && !entry.isDirectory()) {
+                    String className = name.substring(packageName.length() + 1, name.length() - 6);
+                    try {
+                        classes.add(Class.forName(packageName + '.' + className));
+                    } catch (ClassNotFoundException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+            }
+        }
+    }
+
+    /* Register Spark profiler extra server configurations */
+
+    private static List<String> buildSparkExtraConfigs() {
+        List<String> extraConfigs = new ArrayList<>(Arrays.asList(
+                "config/leaf-global.yml",
+                "config/gale-global.yml",
+                "config/gale-world-defaults.yml"
+        ));
+
+        for (World world : Bukkit.getWorlds()) {
+            extraConfigs.add(world.getWorldFolder().getName() + "/gale-world.yml"); // Gale world config
+        }
+
+        return extraConfigs;
+    }
+
+    private static String[] buildSparkHiddenPaths() {
+        return new String[]{
+        };
+    }
+
+    public static void regSparkExtraConfig() {
+        if (GlobalConfiguration.get().spark.enabled || Bukkit.getServer().getPluginManager().getPlugin("spark") != null) {
+            String extraConfigs = String.join(",", buildSparkExtraConfigs());
+            String hiddenPaths = String.join(",", buildSparkHiddenPaths());
+
+            System.setProperty("spark.serverconfigs.extra", extraConfigs);
+            System.setProperty("spark.serverconfigs.hiddenpaths", hiddenPaths);
+        }
+    }
+
+    /* Purge and backup old Leaf config & Pufferfish config */
+
+    private static void purgeOutdated() {
+        boolean foundLegacy = false;
+        String pufferfishConfig = "pufferfish.yml";
+        String leafConfigV1 = "leaf.yml";
+        String leafConfigV2 = "leaf_config";
+
+        Date date = new Date();
+        SimpleDateFormat dateFormat = new SimpleDateFormat("yyMMddhhmmss");
+        String backupDir = "config/backup" + dateFormat.format(date) + "/";
+
+        File pufferfishConfigFile = new File(pufferfishConfig);
+        File leafConfigV1File = new File(leafConfigV1);
+        File leafConfigV2File = new File(leafConfigV2);
+        File backupDirFile = new File(backupDir);
+
+        try {
+            if (pufferfishConfigFile.exists() && pufferfishConfigFile.isFile()) {
+                createDirectory(backupDirFile);
+                Files.move(pufferfishConfigFile.toPath(), Path.of(backupDir + pufferfishConfig), StandardCopyOption.REPLACE_EXISTING);
+                foundLegacy = true;
+            }
+            if (leafConfigV1File.exists() && leafConfigV1File.isFile()) {
+                createDirectory(backupDirFile);
+                Files.move(leafConfigV1File.toPath(), Path.of(backupDir + leafConfigV1), StandardCopyOption.REPLACE_EXISTING);
+                foundLegacy = true;
+            }
+            if (leafConfigV2File.exists() && leafConfigV2File.isDirectory()) {
+                createDirectory(backupDirFile);
+                Files.move(leafConfigV2File.toPath(), Path.of(backupDir + leafConfigV2), StandardCopyOption.REPLACE_EXISTING);
+                foundLegacy = true;
+            }
+
+            if (foundLegacy) {
+                LOGGER.warn("Found legacy Leaf config files, move to backup directory: {}", backupDir);
+                LOGGER.warn("New Leaf config located at config/ folder, You need to transfer config to the new one manually and restart the server!");
+            }
+        } catch (IOException e) {
+            LOGGER.error("Failed to purge old configs.", e);
+        }
+    }
+}
diff --git a/src/main/java/org/dreeam/leaf/config/LeafGlobalConfig.java b/src/main/java/org/dreeam/leaf/config/LeafGlobalConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..794bc822d987ee2bb69b953ea70ae3ee08124ac5
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/LeafGlobalConfig.java
@@ -0,0 +1,137 @@
+package org.dreeam.leaf.config;
+
+import io.github.thatsmusic99.configurationmaster.api.ConfigFile;
+import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
+
+import java.io.File;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+public class LeafGlobalConfig {
+
+    protected static ConfigFile configFile;
+    private static final String CURRENT_REGION = Locale.getDefault().getCountry().toUpperCase(Locale.ROOT); // It will be in uppercase by default, just make sure
+    protected static final boolean isCN = CURRENT_REGION.equals("CN");
+
+    public LeafGlobalConfig(boolean init) throws Exception {
+            configFile = ConfigFile.loadConfig(new File(LeafConfig.I_CONFIG_FOLDER, LeafConfig.I_GLOBAL_CONFIG_FILE));
+            configFile.set("config-version", 3.0);
+            configFile.addComments("config-version", pickStringRegionBased("""
+                    Leaf Config
+                    GitHub Repo: https://github.com/Winds-Studio/Leaf
+                    Discord: https://discord.com/invite/gfgAwdSEuM""",
+                    """
+                    Leaf Config
+                    GitHub Repo: https://github.com/Winds-Studio/Leaf
+                    QQ Group: 619278377"""));
+
+            // Pre-structure to force order
+            structureConfig();
+    }
+
+    protected void structureConfig() {
+        for (EnumConfigCategory configCate : EnumConfigCategory.getCategoryValues()) {
+            createTitledSection(configCate.name(), configCate.getBaseKeyName());
+        }
+    }
+
+    public void saveConfig() throws Exception {
+        configFile.save();
+    }
+
+    // Config Utilities
+
+    public void createTitledSection(String title, String path) {
+        configFile.addSection(title);
+        configFile.addDefault(path, null);
+    }
+
+    public boolean getBoolean(String path, boolean def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getBoolean(path, def);
+    }
+
+    public boolean getBoolean(String path, boolean def) {
+        configFile.addDefault(path, def);
+        return configFile.getBoolean(path, def);
+    }
+
+    public String getString(String path, String def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getString(path, def);
+    }
+
+    public String getString(String path, String def) {
+        configFile.addDefault(path, def);
+        return configFile.getString(path, def);
+    }
+
+    public double getDouble(String path, double def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getDouble(path, def);
+    }
+
+    public double getDouble(String path, double def) {
+        configFile.addDefault(path, def);
+        return configFile.getDouble(path, def);
+    }
+
+    public int getInt(String path, int def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getInteger(path, def);
+    }
+
+    public int getInt(String path, int def) {
+        configFile.addDefault(path, def);
+        return configFile.getInteger(path, def);
+    }
+
+    public List<String> getList(String path, List<String> def, String comment) {
+        configFile.addDefault(path, def, comment);
+        return configFile.getStringList(path);
+    }
+
+    public List<String> getList(String path, List<String> def) {
+        configFile.addDefault(path, def);
+        return configFile.getStringList(path);
+    }
+
+    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue) {
+        configFile.addDefault(path, null);
+        configFile.makeSectionLenient(path);
+        defaultKeyValue.forEach((string, object) -> configFile.addExample(path + "." + string, object));
+        return configFile.getConfigSection(path);
+    }
+
+    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue, String comment) {
+        configFile.addDefault(path, null, comment);
+        configFile.makeSectionLenient(path);
+        defaultKeyValue.forEach((string, object) -> configFile.addExample(path + "." + string, object));
+        return configFile.getConfigSection(path);
+    }
+
+    public void addComment(String path, String comment) {
+        configFile.addComment(path, comment);
+    }
+
+    public void addCommentIfCN(String path, String comment) {
+        if (isCN) {
+            configFile.addComment(path, comment);
+        }
+    }
+
+    public void addCommentIfNonCN(String path, String comment) {
+        if (!isCN) {
+            configFile.addComment(path, comment);
+        }
+    }
+
+    public void addCommentRegionBased(String path, String en, String cn) {
+        configFile.addComment(path, isCN ? cn : en);
+    }
+
+    public String pickStringRegionBased(String en, String cn) {
+        return isCN ? cn : en;
+    }
+}
diff --git a/src/main/java/org/dreeam/leaf/config/annotations/DoNotLoad.java b/src/main/java/org/dreeam/leaf/config/annotations/DoNotLoad.java
new file mode 100644
index 0000000000000000000000000000000000000000..b6687584b7bd914ae53f97df592d7a309a7e1d51
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/annotations/DoNotLoad.java
@@ -0,0 +1,8 @@
+package org.dreeam.leaf.config.annotations;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface DoNotLoad {
+}
diff --git a/src/main/java/org/dreeam/leaf/config/annotations/Experimental.java b/src/main/java/org/dreeam/leaf/config/annotations/Experimental.java
new file mode 100644
index 0000000000000000000000000000000000000000..26a6967ca8917bbabb31804a44326a1091b9cb96
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/annotations/Experimental.java
@@ -0,0 +1,12 @@
+package org.dreeam.leaf.config.annotations;
+
+import java.lang.annotation.*;
+
+/**
+ * Indicates that a feature is experimental and may be removed or changed in the future.
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(value = {ElementType.FIELD})
+public @interface Experimental {
+}
diff --git a/src/main/java/org/dreeam/leaf/config/annotations/HotReloadUnsupported.java b/src/main/java/org/dreeam/leaf/config/annotations/HotReloadUnsupported.java
new file mode 100644
index 0000000000000000000000000000000000000000..c89bf6a7ec4bdd94a9ee69eb3907e8e899e6d69b
--- /dev/null
+++ b/src/main/java/org/dreeam/leaf/config/annotations/HotReloadUnsupported.java
@@ -0,0 +1,8 @@
+package org.dreeam.leaf.config.annotations;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface HotReloadUnsupported {
+}
